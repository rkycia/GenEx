/***********************************************************************
* 					Generator.h
*                              
*   Generator main class.
*
*                           
***********************************************************************/

#ifndef Generator_H
#define Generator_H

/*!
  @class Generator

  @brief Generator main class.

*/


#include <cmath>
#include <iomanip>
#include <iostream>
#include <cstring>

#include "TSystem.h"
#include "TString.h"
#include "TFoam.h"
#include "TFile.h"
#include "TRandom.h"
#include "TRandom3.h"	
#include "TLegend.h"

#include "Global.h"
#include "TDensity.h"
#include "TEventMaker.h"
#include "TConfigReader.h"
#include "TPolicyReader.h"
#include "TEvent.h"
#include "THistogram.h"
#include "TIntegral.h"
#include "TWeightStrategy.h"
#include "TWeight.h"
#include "TAcceptance.h"
#include "TGenerationAcceptance.h"
#include "TEventWriter.h"
#include "TLog.h"

using namespace std;

////////////////////////////////////////////////////////////////////////
//Debugging ON/OFF
//#define DEBUG
#undef DEBUG
////////////////////////////////////////////////////////////////////////


class Generator
{
  
private:

	///Integration method
	int IntegratorSetup;
  
	///Random number generator for integration using uniform rnd, not FOAM
	TRandom  * IntegratorRan;

	/// True if any event was generated
	bool isEventGenerated;

	/// Density function to integrate. Interface to TFoam for Generator.
	TDensity * Density;
  
	/// Random number generator for TFoam.
	/// @warning The period of the generator = 2**19937-1, it is big, however finite number, be warned !!!
	TRandom  * PseRan;
 
	/// TFoam
	TFoam * FoamX;
  
	/// TEvent - for passing particles
	TEvent * event;
  
	/// TWeight - for calculating weight base on specific matrix element
	TWeightStrategy * Weight;
  
	///Determines type of reaction
	int weightStrategy;
  
	/// Monte Carlo weight
	double MCwt;
  
	/// Vector generated by TFoam
	double *MCvect;
  
	/// Integral norm. Returned by TFoam after exploration phase.
	double Rprim; 
  
	/// Error of integral norm. Returned by TFoam after exploration phase.
	double ErrRprim;
  
	/// Dimension of the phase space
	int TotDim;
  
	/// Maximum weight in rejection for getting wt=1 events
	double fMaxWtRej;  

	/// Logging
	TLog * Logger;
 
	///configuration file reader
	TConfigReader * ConfigReader;
	
	///Histograms
	THistogram * Histogram;
	THistogram * AcceptanceHistogram;
	
	///Integral
	TIntegral * FullIntegral;
	TIntegral * AcceptanceIntegral;

	///Backup events in root tree
	TEventWriter * EventWriter;

	///Reads configuration form the file
	/// @param  filename - string containing filename with configuration
	void ReadConfigFile( const string & filename );

	//FOAM parameters:
	int  kDim;   	/// HYP-CUBICAL subspace
	int  nCells;   	/// Number of Cells
	int  nSampl;   	/// Number of MC events per cell in build-up
	int  nBin;   	/// Number of bins in build-up
	int  OptRej;   	/// =0, weighted events;  =1, wt=1 events
	int  OptDrive;  /// (D=2) Option, type of Drive =0,1,2 for TrueVol,Sigma,WtMax
	int  EvPerBin;  /// Maximum events (equiv.) per bin in buid-up
	double MaxWtRej;/// Maximum wt for rejection, for OptRej=1
	int  Chat;   	/// Chat level

	///Called before destruction
	void Finish( void );
	
	///logfile name
	string LogFile;
	
	/// save results every 'backupInterval' steps
	int backupInterval;
	
	/// Counts number of generated events
	long int numberOfEvents;

	/// Backup event generator and histograms in case of crash
	/// it is called every 'backupInterval' steps
	void backup( void );
	
	///Use different cuts during generation
	///0 - no, 1 - yes
	int UseExplorationCuts;

	///Seed for random number generator
	long int seed;

public:

	/// Internal generator to generate events in Cylindrycal Phase Space
	TEventMaker * eventMaker;
    
	/// Function that initialize inner state of generator
	Int_t Init( void );  
  
	/// Generate an event.
	Int_t Generate( void );
 
	///Constructor  
	Generator();
	
	///Destructor
	virtual ~Generator();


	/// @return value of the integral and error
	void getIntegral( double & integral, double & error );
	
	/// @return value of the acceptance integral and error
	/// @note If the option UseExplorationCuts != 1 then it throws exeption
	void getAcceptanceIntegral( double & integral, double & error );
	
};

#endif 
